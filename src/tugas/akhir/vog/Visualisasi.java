package tugas.akhir.vog;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.graphstream.algorithm.ConnectedComponents;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.MultiGraph;
import org.graphstream.stream.file.FileSinkDGS;
import org.graphstream.stream.file.FileSourceDGS;
import org.graphstream.ui.swingViewer.View;
import org.graphstream.ui.swingViewer.Viewer;
import org.graphstream.algorithm.Toolkit;
import org.graphstream.graph.Node;

/**
 *
 * @author satrio
 * Descripsi : Class untuk memvisualisasikan data Graph agar lebih memudahkan untuk debugging
 */
public class Visualisasi extends javax.swing.JFrame {
    
    // variable-variable global yang akan digunakan untuk membantu kelancaran jalannya aplikasi.
    String styleSheet = "";
    Graph graph;
    int idUrl, idUser, idEdge;
    private int idNextUrl;
    private Viewer viewer;
    ConnectedComponents cc;
    private int kHubset;
    
    public Visualisasi() {
        initComponents();
        
        // untuk styling visualisasi graph
        styleSheet = "node {fill-color: blue; size: 10px;}"+
                     "edge {fill-color: black; arrow-shape: arrow; arrow-size: 5px, 4px;}"+
                     "node.question {fill-color: green;}"+
                     "node.user {fill-color: blue;}"+
                     "node.hub {fill-color: red;}"+
                     "node.clique {fill-color: cyan;}"+
                     "node.star {fill-color: magenta;}"+
                     "node.chain {fill-color: blue;}"+
                     "node.bipartite {fill-color: black;}";
        
        graph = new MultiGraph("Graph Quora");
        graph.addAttribute("ui.stylesheet", styleSheet);
        viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
        
        cc = new ConnectedComponents(graph);
        cc.setCutAttribute("cut");
        
        // initialize kHubset
        while (true) {
            String k = JOptionPane.showInputDialog(this, "Input jumlah node maximum pada GCC", "K-Hubset", 
                JOptionPane.INFORMATION_MESSAGE);
            if(k == null){
                System.exit(1);
            }
            try {
                int userInputK = Integer.parseInt(k);
                if((userInputK > 1) && (userInputK <= 20)){
                    kHubset = userInputK;
                    break;
                }
                else{
                    JOptionPane.showMessageDialog(this, "Input harus > 1 dan <= 20 !!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Input berupa angka", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        paneMain = new javax.swing.JPanel();
        paneGraphVis = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        paneVisualisasi = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSummarization = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTimeSlashburn = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTimeLabeling = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTimeVoG = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        paneContainerQuery = new javax.swing.JPanel();
        txtInputQuery = new javax.swing.JTextField();
        btnUpCamera = new javax.swing.JButton();
        btnDownCamera = new javax.swing.JButton();
        btnRightCamera = new javax.swing.JButton();
        btnLeftCamera = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemLoadGraph = new javax.swing.JMenuItem();
        menuItemLoadGraphRaw = new javax.swing.JMenuItem();
        menuItemSaveGraph = new javax.swing.JMenuItem();
        menuItemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        paneMain.setBackground(new java.awt.Color(1, 1, 1));

        paneVisualisasi.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                paneVisualisasiMouseDragged(evt);
            }
        });
        paneVisualisasi.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                paneVisualisasiMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout paneVisualisasiLayout = new javax.swing.GroupLayout(paneVisualisasi);
        paneVisualisasi.setLayout(paneVisualisasiLayout);
        paneVisualisasiLayout.setHorizontalGroup(
            paneVisualisasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 785, Short.MAX_VALUE)
        );
        paneVisualisasiLayout.setVerticalGroup(
            paneVisualisasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Visualisasi", paneVisualisasi);

        tblSummarization.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Perfect Clique", null},
                {"Perfect Star", null},
                {"Perfect Bipartite", null},
                {"Perfect Chain", null},
                {"Near Clique", null},
                {"Near Star", ""},
                {"Near Bipartite", null},
                {"Near Chain", null}
            },
            new String [] {
                "Structure", "Count"
            }
        ));
        jScrollPane1.setViewportView(tblSummarization);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Waktu eksekusi Slashburn:");

        jLabel2.setText("Waktu eksekusi Labeling :");

        jLabel3.setText("Waktu eksekusi VoG :");

        lblTimeSlashburn.setText("0");

        jLabel5.setText("ms");

        lblTimeLabeling.setText("0");

        jLabel7.setText("ms");

        lblTimeVoG.setText("0");

        jLabel9.setText("ms");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTimeLabeling))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(lblTimeSlashburn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(43, 43, 43)
                        .addComponent(lblTimeVoG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTimeSlashburn)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblTimeLabeling)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblTimeVoG)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Summarization", jPanel1);

        javax.swing.GroupLayout paneGraphVisLayout = new javax.swing.GroupLayout(paneGraphVis);
        paneGraphVis.setLayout(paneGraphVisLayout);
        paneGraphVisLayout.setHorizontalGroup(
            paneGraphVisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneGraphVisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        paneGraphVisLayout.setVerticalGroup(
            paneGraphVisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneGraphVisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        txtInputQuery.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        txtInputQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputQueryActionPerformed(evt);
            }
        });

        btnUpCamera.setText("up");
        btnUpCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpCameraActionPerformed(evt);
            }
        });

        btnDownCamera.setText("Down");
        btnDownCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownCameraActionPerformed(evt);
            }
        });

        btnRightCamera.setText("Right");
        btnRightCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightCameraActionPerformed(evt);
            }
        });

        btnLeftCamera.setText("Left");
        btnLeftCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftCameraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneContainerQueryLayout = new javax.swing.GroupLayout(paneContainerQuery);
        paneContainerQuery.setLayout(paneContainerQueryLayout);
        paneContainerQueryLayout.setHorizontalGroup(
            paneContainerQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneContainerQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtInputQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneContainerQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneContainerQueryLayout.createSequentialGroup()
                        .addComponent(btnLeftCamera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRightCamera))
                    .addComponent(btnUpCamera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDownCamera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneContainerQueryLayout.setVerticalGroup(
            paneContainerQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneContainerQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneContainerQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneContainerQueryLayout.createSequentialGroup()
                        .addComponent(btnUpCamera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneContainerQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRightCamera)
                            .addComponent(btnLeftCamera))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDownCamera))
                    .addComponent(txtInputQuery))
                .addContainerGap())
        );

        javax.swing.GroupLayout paneMainLayout = new javax.swing.GroupLayout(paneMain);
        paneMain.setLayout(paneMainLayout);
        paneMainLayout.setHorizontalGroup(
            paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneGraphVis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paneContainerQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneMainLayout.setVerticalGroup(
            paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneGraphVis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paneContainerQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuFile.setText("File");

        menuItemLoadGraph.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemLoadGraph.setText("Load Graph");
        menuItemLoadGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadGraphActionPerformed(evt);
            }
        });
        menuFile.add(menuItemLoadGraph);

        menuItemLoadGraphRaw.setText("Load Graph from Raw");
        menuItemLoadGraphRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadGraphRawActionPerformed(evt);
            }
        });
        menuFile.add(menuItemLoadGraphRaw);

        menuItemSaveGraph.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveGraph.setText("Save Graph");
        menuItemSaveGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveGraphActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveGraph);

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");
        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method SlashBurn
     * untuk meng-generate subgraph, melalui shattering graph.
     * input : graph
     * output : sets of subgraph
    */
    private void slashburn() {
        // lakukan slash edge dan burn hub ketika GCC lebih besar dari k
        do {            
            System.out.println("GCC size : "+cc.getGiantComponent().size());
            System.out.printf("%d connected component(s) in this graph, so far.%n",
                               cc.getConnectedComponentsCount(3));

            // temukan node dgn degree paling tinggi yang ada di GCC
            int i = 0;
            Node hub = Toolkit.degreeMap(graph).get(i);
            while(!cc.getGiantComponent().contains(hub)){
                hub = Toolkit.degreeMap(graph).get(i++);
            }
            // hub di GCC sudah ditemukan
            
            // variable penampung friend of hub yang single, untuk nanti direconstruct dengan hub
            ArrayList<Node> listHubFriendSingle = new ArrayList<>();
            
            // iterator for find friends of the hub that friend is single
            Iterator<Node> neighborHubIterator = hub.getNeighborNodeIterator();
            
            // teman dari hub diiterasi satu2 untuk dicari yang single
            while(neighborHubIterator.hasNext()){
                Node hubFriend = neighborHubIterator.next();
//                System.out.println("hub neighbor : "+hubFriend);
                // marks friend that have no friends
                if(hubFriend.getDegree() == 1){
                    listHubFriendSingle.add(hubFriend);
//                    System.out.println("single node friend of hub : "+hubFriend.getId());
                }
                else{
//                    System.err.println("out of degree");
                }
            } // ketika proses selesai didapatlah list teman dari hub yang single untuk nanti di reconstruct ke hub

            // setelah teman hub didapat
            // remove hub
            graph.removeNode(hub);
//            System.out.println("Hub removed");
            
            // reconstruct hub if single node exist after hub removal
            if(listHubFriendSingle.size() > 0){
                graph.addNode(hub.getId()).addAttribute("ui.class", "hub");
                graph.getNode(hub.getId()).addAttribute("ui.label", hub.getId());
                // connect single node to the hub
                for(Node n : listHubFriendSingle){
                    graph.addEdge(n.getId()+" "+Math.random(), hub, n);
                }
//                System.out.println("hub and friends created");
            }
            else{
//                System.err.println("No hub and single friends created");
            }
            
            System.out.printf("Eventually, there are %d.%n",
                       cc.getConnectedComponentsCount(3));
        } while (cc.getGiantComponent().size() > kHubset); // find GCC, where k = 5
    }
    
    /**
     * Method Labeling
     * proses untuk memberikan label(mengidentifikasi struktur) terhadap setiap subgraph yang dihasilkan oleh method slashburn
     * input : sets of subgraph
     * output : struktur tiap subgraph
    */
    public void labeling(){
        // get each subgraph after slashburn done
        ArrayList<Subgraph> listSubgraph = new ArrayList<>();
        
        Subgraph subgraph;
        ArrayList<Node> giantSubgraph = new ArrayList<>();
        int i = 0;
        
        while(cc.getConnectedComponentsCount(3)>0){
//            System.err.println("iteration "+i++);
//            System.err.println("remaining gcc = "+cc.getConnectedComponentsCount(3));
            // buat subgraph
            subgraph = new Subgraph();
            
            // variable penampung dari node2 yang ada di subgraph
            giantSubgraph = (ArrayList<Node>) cc.getGiantComponent();
            
            // add node dari GCC ke subgraph baru
            for(Node n : giantSubgraph){
//                System.out.println(n);
                subgraph.addNode(n.getId());
            }
            
            // get list edge dari subgraph
            int idEdgeSubgraph = 0;
            // untuk setiap node dalam giantSubgraph dicari friendnya
            for(Node n : giantSubgraph){
                Iterator<Node> nFriend = n.getNeighborNodeIterator();
                
                // iterasi friend satu per satu
                while(nFriend.hasNext()){
                    Node friend = nFriend.next();
                    subgraph.addEdge(idEdgeSubgraph+"", friend.getId(), n.getId());
                    if(friend.hasEdgeBetween(n)){
                        friend.getEdgeBetween(n).setAttribute("cut");
                    }
                    idEdgeSubgraph++;
                }
            }
            
            // tampung subgraph yg ditemukan ke listSubgraph
            listSubgraph.add(subgraph);
        }
        System.out.println("pemindahan subgraph telah selesai");
        
        // variable penampung jumlah subgraph structure
        int nPerfectClique = 0, nNearClique = 0, nBipartite = 0, nNearBipartite = 0, 
                nStar = 0, nNearStar = 0, nChain = 0, nNearChain = 0;
        
        for (Subgraph s : listSubgraph) {
            // subgraph di reorder berdasarkan degree, biar mudah untuk di compare dengan model
            s.reorderSubgraph();
//            s.getOrderedSubgraph().display();
            System.out.println("Matrix subgraph yang akan diidentifikasi strukturnya");
            int[][] subgraphMatrix = Toolkit.getAdjacencyMatrix(s.getOrderedSubgraph());
            for(int[] row : subgraphMatrix){
                for(int j = 0; j < subgraphMatrix.length; j++){
                    System.out.print(row[j]+" ");
                }
                System.out.println("");
            }
            
            // generate model untuk comparison dengan subgraph
            Model m = new Model();
            m.generateClique(s.getOrderedSubgraph().getNodeCount());
            m.generateStar(s.getOrderedSubgraph().getNodeCount());
            m.generateBipartite(s.getOrderedSubgraph().getNodeCount());
            
            // variable penampung berupa matrix untuk hasil comparison
            int[][] matrixSubgraph = Toolkit.getAdjacencyMatrix(s.getOrderedSubgraph());
            int[][] matrixComparisonClique = new int[s.getOrderedSubgraph().getNodeCount()][s.getOrderedSubgraph().getNodeCount()];
            int[][] matrixComparisonStar = new int[s.getOrderedSubgraph().getNodeCount()][s.getOrderedSubgraph().getNodeCount()];
            int[][] matrixComparisonBipartite = new int[s.getOrderedSubgraph().getNodeCount()][s.getOrderedSubgraph().getNodeCount()];
            
            // proses perbandingan
            int z = 0;
            for (int[] row : matrixSubgraph) {
                for(int j = 0; j < matrixSubgraph.length; j++){
                    // proses matching dengan operasi XOR, untuk mendapatkan matrix error
                    matrixComparisonClique[z][j] = row[j]^m.getCliqueModel()[z][j];
                    matrixComparisonStar[z][j] = row[j]^m.getStarModel()[z][j];
                    matrixComparisonBipartite[z][j] = row[j]^m.getBipartiteModel()[z][j];
                }
                z++;
            }
            
            
        // PERFECT LABELING PROCESS
            // proses count error clique
            int countCliqueError = 0;
            for(int[] row : matrixComparisonClique){
                for(int j = 0; j < matrixComparisonClique.length; j++){
                    if(row[j] != 0){
                        // kalau ada non zero element, berarti ada error, count!
                        countCliqueError++;
                    }
//                    System.err.print(row[j]+" ");
                }
//                System.err.println("");
            }
            s.setCliqueError(countCliqueError);
            System.out.println("Jumlah error pada matrix comparison clique = "+s.getCliqueError());
            
            // proses count error star
            int countStarError = 0;
            for(int[] row : matrixComparisonStar){
                for(int j = 0; j < matrixComparisonStar.length; j++){
                    if(row[j] != 0){
                        // kalau ada non zero element, berarti ada error, count!
                        countStarError++;
                    }
//                    System.err.print(row[j]+" ");
                }
//                System.err.println("");
            }
            s.setStarError(countStarError);
            System.out.println("Jumlah error pada matrix comparison star = "+s.getStarError());
            
            // proses count error bipartite
            int countBipartiteError = 0;
            for(int[] row : matrixComparisonBipartite){
                for(int j = 0; j < matrixComparisonBipartite.length; j++){
                    if(row[j] != 0){
                        // kalau ada non zero element, berarti ada error, count!
                        countBipartiteError++;
                    }
//                    System.err.print(row[j]+" ");
                }
//                System.err.println("");
            }
            s.setBipartiteError(countBipartiteError);
            System.out.println("Jumlah error pada matrix comparison bipartite = "+s.getBipartiteError());
            
            // proses count error chain
            // perlakuan khusus untuk count error struktur chain
            int nonZeroElementOnRow = 0;
            int countChainError = 0;
            int it = 0;
            for(int[] row : subgraphMatrix){
                for(int j = 0; j < subgraphMatrix.length; j++){
                    if(row[j] != 0){
                        nonZeroElementOnRow++;
                    }
//                    System.out.print(row[j]+" ");
                }
                if(it < row.length-2){
                    countChainError += nonZeroElementOnRow-2;
                }
                else{
                    countChainError += nonZeroElementOnRow-1;
                }
                it++;
                // reset non zero element untuk penghitungan row selanjutnya
                nonZeroElementOnRow = 0;
//                System.out.println("");
            }
            s.setChainError(countChainError);
            System.out.println("Jumlah error pada matrix comparison chain = "+s.getChainError());
            
            if(s.getLowestError() == 0){
                // kalau lowest errornya 0 berarti perfect structure
                if(s.getCliqueError() == 0){
                    s.setPerfectStructure("Perfect Clique");
                    nPerfectClique++;
                }
                else if(s.getStarError() == 0){
                    s.setPerfectStructure("Perfect Star");
                    nStar++;
                }
                else if(s.getBipartiteError() == 0){
                    s.setPerfectStructure("Perfect Bipartite");
                    nBipartite++;
                }
                else if(s.getChainError() == 0){
                    s.setPerfectStructure("Perfect Chain");
                    nChain++;
                }
                System.out.println("Subgraph yang diidentifikasi = "+s.getStructure());
            // Perfect labeling done, pilih error yang paling kecil, set itulah struktur subgraphnya.
            }
        // APPROXIMATE LABELING, pilih error yang paling kecil, set itulah struktur subgraphnya.
            else{
                int lowestErrorOnSubgraph = s.getLowestError();
                if(s.getCliqueError() == lowestErrorOnSubgraph){
                    s.setPerfectStructure("Approximate Clique");
                    nNearClique++;
                }
                else if(s.getStarError() == lowestErrorOnSubgraph){
                    s.setPerfectStructure("Approximate Star");
                    nNearStar++;
                }
                else if(s.getBipartiteError() == lowestErrorOnSubgraph){
                    s.setPerfectStructure("Approximate Bipartite");
                    nNearBipartite++;
                }
                else if(s.getChainError() == lowestErrorOnSubgraph){
                    s.setPerfectStructure("Approximate Chain");
                    nNearChain++;
                }
                System.out.println("Subgraph yang diidentifikasi = "+s.getStructure());
//                System.err.println("Subgraph yang diidentifikasi bukan perfect structure,"
//                        + " try approximate structure");
                
            }
            System.out.println("");
            System.out.println("");
            System.out.println("");
//            break;
        }
        // looping identifying each subgraph done
        // do reporting
        System.out.println("===== SUMMARIZE =====");
        System.out.println("Perfect clique ditemukan dengan jumlah = "+ nPerfectClique);
        tblSummarization.setValueAt(nPerfectClique, 0, 1);
        System.out.println("Perfect star ditemukan dengan jumlah = "+ nStar);
        tblSummarization.setValueAt(nStar, 1, 1);
        System.out.println("Perfect bipartite ditemukan dengan jumlah = "+ nBipartite);
        tblSummarization.setValueAt(nBipartite, 2, 1);
        System.out.println("Perfect chain ditemukan dengan jumlah = "+ nChain);
        tblSummarization.setValueAt(nChain, 3, 1);
        System.out.println("");
        System.out.println("Near clique ditemukan dengan jumlah = "+ nNearClique);
        tblSummarization.setValueAt(nNearClique, 4, 1);
        System.out.println("Near star ditemukan dengan jumlah = "+ nNearStar);
        tblSummarization.setValueAt(nNearStar, 5, 1);
        System.out.println("Near bipartite ditemukan dengan jumlah = "+ nNearBipartite);
        tblSummarization.setValueAt(nNearBipartite, 6, 1);
        System.out.println("Near chain ditemukan dengan jumlah = "+ nNearChain);
        tblSummarization.setValueAt(nNearChain, 7, 1);
        System.out.println("===== END OF SUMMARIZATION =====");
        
//        JOptionPane.showMessageDialog(this, "Summarize done, check on Summarize Pane", "Done", JOptionPane.INFORMATION_MESSAGE);
        
        // ALGORITMA IDENTIFIKASI STRUKTUR TIAP SUBGRAPH
        // loop through listOfSubgraph to identify what structure is that subgraph
            // convert subgraph to ordered adjacency matrix
            // generate model (Adjacency Matrix of Clique, Bipartite, Star, Chain) based on number of node of subgraph
            // compare subgraph to each model
            // get the Error
            // select minimum error and set subgraph to identified structure
    }
    
    private void menuItemLoadGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadGraphActionPerformed
        
        // open file dialog untuk memilih graph database
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("file dgs", "dgs");
        fc.setFileFilter(filter);
        int rtn = fc.showOpenDialog(this);
        
        if(rtn == JFileChooser.APPROVE_OPTION){
            String file = fc.getSelectedFile().getAbsolutePath();
            System.out.println(file);
            
            FileSourceDGS fdgs = new FileSourceDGS();
            fdgs.addSink(graph);
            
            try {
                // proses load data
                fdgs.readAll(file);
            } catch (IOException ex) {
                Logger.getLogger(Visualisasi.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                fdgs.removeSink(graph);
            }
            System.out.println("success load "+ file);
            
            // diplay graph to panel
            View view = viewer.addDefaultView(false);
            viewer.enableAutoLayout();
            paneVisualisasi.setLayout(new BorderLayout());
            paneVisualisasi.add(view, BorderLayout.CENTER);
            paneVisualisasi.setVisible(true);
        }
        else {
            System.err.println("Load canceled !");
        }
        
    }//GEN-LAST:event_menuItemLoadGraphActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        // exit the apps
        System.exit(1);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemSaveGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveGraphActionPerformed
        
        // open save dialog to save the graph
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int rtn = fc.showSaveDialog(this);
        if(rtn == JFileChooser.APPROVE_OPTION){
            String file = fc.getSelectedFile().getAbsolutePath();
            try {
                // save current graph to dgs file
                FileSinkDGS fsdgs = new FileSinkDGS();
                fsdgs.writeAll(graph, file);
                System.out.println("success save "+ file);
            } catch (IOException ex) {
                Logger.getLogger(Visualisasi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            System.err.println("Save canceled !");
        }
    }//GEN-LAST:event_menuItemSaveGraphActionPerformed

    private void txtInputQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputQueryActionPerformed
        // TODO query processing dari text yg diinput user
        String inputUser = txtInputQuery.getText();
        
        // identifikasi query
        if (inputUser.equals("disableAutoLayout()")){
            viewer.disableAutoLayout();
        }
        else if(inputUser.equals("enableAutoLayout()")){
            viewer.enableAutoLayout();
        }
        else if(inputUser.equals("resetView()")){
            View view = viewer.getDefaultView();
            view.getCamera().resetView();
        }
        else if(inputUser.equals("getGraphInfo()")){
            JOptionPane.showMessageDialog(this, "Jumlah node : " + graph.getNodeCount() + "\nJumlah edge : " +
                    graph.getEdgeCount(), "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(inputUser.equals("slashburn()")){
            slashburn();
        }
        else if(inputUser.equals("subgraphLabeling()")){
            labeling();
        }
        else if(inputUser.equals("VoG()")){
            long startSlashburn = System.nanoTime();
            slashburn();
            long endSlashburn = System.nanoTime() - startSlashburn;
            
            long startLabeling = System.nanoTime();
            labeling();
            long endLabeling = System.nanoTime() - startLabeling;
            
            long VoGTime = endSlashburn + endLabeling;
            System.out.println("Slashburn time = " + endSlashburn/1000000 + " ms");
            lblTimeSlashburn.setText(endSlashburn/1000000+"");
            System.out.println("Subgraph Labeling time = " + endLabeling/1000000 + " ms");
            lblTimeLabeling.setText(endLabeling/1000000+"");
            System.out.println("VoG time = " + VoGTime/1000000 + " ms");
            lblTimeVoG.setText(VoGTime/1000000+"");
        }
        else{
            JOptionPane.showMessageDialog(this, "Wrong query !", "Graph Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtInputQueryActionPerformed

    private void menuItemLoadGraphRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadGraphRawActionPerformed
        // TODO load graph from Raw Web
        
        // open file dialog untuk memilih graph database
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("file text", "txt");
        fc.setFileFilter(filter);
        int rtn = fc.showOpenDialog(this);
        
        BufferedReader br = null;
        
        if(rtn == JFileChooser.APPROVE_OPTION){
            try {
                // load dari txt
                String filePath = fc.getSelectedFile().getAbsolutePath();
                String line;
                ArrayList<String> listNodeUser = new ArrayList<>();
                
                br = new BufferedReader(new FileReader(new File(filePath)));
                
                // read file perline
                idUser = graph.getNodeCount();
                idEdge = graph.getEdgeCount();
                
                while((line = br.readLine()) != null){
                    // proses perline parsing jadi node USER, edgenya adalah url.
                    String url = null;
                    
                    // ada row dari raw data yang ga ada usernya, eliminasi aja
                    if(!"[]".equals(line.split("###")[1])){
                        // DAPAT EDGE URL
                        url = line.split("###")[0];
                    
                        String rawUser = line.split("###")[1];
                        // karena listNodeUser masih ada [ dan ], maka hilangkan dulu
                        rawUser = rawUser.substring(1, rawUser.length()-1);
                        for (String user : rawUser.split(", ")) {
                            // DAPAT KUMPULAN NODE USER
                            if(!user.equals("Quora User")){
                                listNodeUser.add(user);
                            } else{
//                                System.out.println("Anonymous User found ! (rejected)");
                            }
                            
                        }
                        
                        // dari node-node yang sudah didapat, buat node di graphstream                        
                        // buat node user
                        for(String user : listNodeUser){
                            // jika user belum ada, buat node user, hubungkan dengan url
                            if(graph.getNode(user) == null){
                                graph.addNode(user);
                                graph.getNode(user).addAttribute("ui.class", "user");
                                graph.getNode(user).addAttribute("ui.label", user);
                            }
                            // kalo ada langsung hubungkan
                            else{
//                                System.out.println("Node user "+user+ "already created");
                            }
                            idUser++;
                        }
                        // hubungkan ke node user lainnya yg ada di url yang sama
                        
                        for(String user : listNodeUser){
                            for(String anotherUser : listNodeUser){
                                if(!user.equals(anotherUser) && !graph.getNode(user).hasEdgeBetween(anotherUser)){
                                    graph.addEdge(idEdge+"", user, anotherUser);
//                                    graph.getEdge(idEdge+"").addAttribute("ui.label", url);
                                    idEdge++;
                                }
                                else{
//                                    System.out.println("edge already exist");
                                }
                            }
                            
                        }
                        // kosongkan lagi usernya
                        listNodeUser.clear();
                    }
                    else{
//                        System.err.println("got an empty user on line " + (idUrl+1) + " on " + filePath);
                    }
                    idUrl++;
                }
                
                System.out.println("success load "+ filePath);
                // diplay graph to panel
                View view = viewer.addDefaultView(false);
                viewer.enableAutoLayout();
                paneVisualisasi.setLayout(new BorderLayout());
                paneVisualisasi.add(view, BorderLayout.CENTER);
                paneVisualisasi.setVisible(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Visualisasi.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Visualisasi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            System.out.println("Load canceled");
        }
    }//GEN-LAST:event_menuItemLoadGraphRawActionPerformed

    
    int scroll = 900;
    private void paneVisualisasiMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_paneVisualisasiMouseWheelMoved
        // TODO zooming the visualization
        int rotate = evt.getWheelRotation();
        double nRotate = evt.getUnitsToScroll();
        
        if (rotate < 0) {
            // scroll up, zoom in
            if(!(scroll < 1)){
                View view = viewer.getDefaultView();
                view.getCamera().setViewPercent(0.001*scroll);
            }
            else{
                scroll = 500;
            }
            scroll-=20;
        } else {
            // scroll down, zoom out
            if(!(scroll > 900)){
                View view = viewer.getDefaultView();
                view.getCamera().setViewPercent(0.001*scroll);
            }
            else{
                scroll = 500;
            }
            scroll+=20;
        }
    }//GEN-LAST:event_paneVisualisasiMouseWheelMoved

    private void paneVisualisasiMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paneVisualisasiMouseDragged
        // TODO add your handling code here:
        System.out.println("Dragged");
        View view = viewer.getDefaultView();
        view.getCamera().setViewCenter(evt.getX(), evt.getY(), 0);
    }//GEN-LAST:event_paneVisualisasiMouseDragged

    private void btnUpCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpCameraActionPerformed
        // TODO add your handling code here:
        View view = viewer.getDefaultView();
        double x = view.getCamera().getViewCenter().x;
        double y = view.getCamera().getViewCenter().y;
        view.getCamera().setViewCenter(x, (y+0.5), 0);
    }//GEN-LAST:event_btnUpCameraActionPerformed

    private void btnDownCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownCameraActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        View view = viewer.getDefaultView();
        double x = view.getCamera().getViewCenter().x;
        double y = view.getCamera().getViewCenter().y;
        view.getCamera().setViewCenter(x, (y-0.5), 0);
    }//GEN-LAST:event_btnDownCameraActionPerformed

    private void btnLeftCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftCameraActionPerformed
        // TODO add your handling code here:
        View view = viewer.getDefaultView();
        double x = view.getCamera().getViewCenter().x;
        double y = view.getCamera().getViewCenter().y;
        view.getCamera().setViewCenter((x-0.5), y, 0);
    }//GEN-LAST:event_btnLeftCameraActionPerformed

    private void btnRightCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightCameraActionPerformed
        // TODO add your handling code here:
        View view = viewer.getDefaultView();
        double x = view.getCamera().getViewCenter().x;
        double y = view.getCamera().getViewCenter().y;
        view.getCamera().setViewCenter((x+0.5), y, 0);
    }//GEN-LAST:event_btnRightCameraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualisasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualisasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualisasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualisasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visualisasi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownCamera;
    private javax.swing.JButton btnLeftCamera;
    private javax.swing.JButton btnRightCamera;
    private javax.swing.JButton btnUpCamera;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblTimeLabeling;
    private javax.swing.JLabel lblTimeSlashburn;
    private javax.swing.JLabel lblTimeVoG;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemLoadGraph;
    private javax.swing.JMenuItem menuItemLoadGraphRaw;
    private javax.swing.JMenuItem menuItemSaveGraph;
    private javax.swing.JPanel paneContainerQuery;
    private javax.swing.JPanel paneGraphVis;
    private javax.swing.JPanel paneMain;
    private javax.swing.JPanel paneVisualisasi;
    private javax.swing.JTable tblSummarization;
    private javax.swing.JTextField txtInputQuery;
    // End of variables declaration//GEN-END:variables
}
